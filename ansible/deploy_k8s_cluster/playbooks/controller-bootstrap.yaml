---
- hosts: controllers
  vars:
    tasks_dir: "../tasks"
  tasks:
    - name: Create temp directory
      file:
        name: "{{ WORK_DIR }}"
        state: directory

    - include_tasks: "{{ tasks_dir }}/kubectl-install.yaml"

    - include_tasks: "{{ tasks_dir }}/etcd-install.yaml"

    - name: Create Kubernetes directories
      file:
        name: "{{ item }}"
        state: directory
      loop:
        - /var/lib/kubernetes/
        - /etc/kubernetes/config/
      become: yes

    - name: Copy CA certs to controller
      copy:
        src: "{{ WORK_DIR }}/{{ item }}"
        dest: "/var/lib/kubernetes"
      loop:
        - ca.pem
        - ca-key.pem
      become: yes

    - name: Install kube-apiserver
      block:
        - block:
            - include_tasks: "{{ tasks_dir }}/encryption-generate.yaml"

          run_once: yes

        - include_tasks: "{{ tasks_dir }}/kube-apiserver-install.yaml"

    - name: Install kube-scheduler
      block:
        - name: Prepare files
          block:
            - include_tasks: "{{ tasks_dir }}/pki-generate-cert.yaml"
              vars:
                name: kube-scheduler
                cn: "system:kube-scheduler"
                org: "system:kube-scheduler"

            - include_tasks: "{{ tasks_dir }}/kubeconfig-generate.yaml"
              vars:
                name: kube-scheduler
                kube_cfg_user: "system:kube-scheduler"
          run_once: yes

        - include_tasks: "{{ tasks_dir }}/kube-scheduler-install.yaml"

    - name: Install kube-controller-manager
      block:
        - name: Prepare files
          block:
            - include_tasks: "{{ tasks_dir }}/pki-generate-cert.yaml"
              vars:
                name: "{{ item.name }}"
                cn: "{{ item.cn }}"
                org: "{{ item.org }}"
              loop:
                - {name: kube-controller-manager, cn: "system:kube-controller-manager", org: "system:kube-controller-manager"}
                - {name: service-account, cn: "service-account", org: "Kubernetes"}

            - include_tasks: "{{ tasks_dir }}/kubeconfig-generate.yaml"
              vars:
                name: kube-controller-manager
                kube_cfg_user: "system:kube-controller-manager"
          run_once: yes

        - include_tasks: "{{ tasks_dir }}/kube-controller-manager-install.yaml"

    - name: Configure RBAC for Kubelet Authorization
      block:
        - name: Copy admin.kubeconfig to controller
          copy:
            src: "{{ WORK_DIR }}/admin.kubeconfig"
            dest: "{{ WORK_DIR }}/"

        - name: Create ClusterRole manifest
          copy:
            content: |
              apiVersion: rbac.authorization.k8s.io/v1beta1
              kind: ClusterRole
              metadata:
                annotations:
                  rbac.authorization.kubernetes.io/autoupdate: "true"
                labels:
                  kubernetes.io/bootstrapping: rbac-defaults
                name: system:kube-apiserver-to-kubelet
              rules:
                - apiGroups:
                    - ""
                  resources:
                    - nodes/proxy
                    - nodes/stats
                    - nodes/log
                    - nodes/spec
                    - nodes/metrics
                  verbs:
                    - "*"
            dest: "{{ WORK_DIR }}/kube-apiserver-to-kubelet-cluster-role.yaml"

        - name: Create ClusterRoleBinding manifest
          copy:
            content: |
              apiVersion: rbac.authorization.k8s.io/v1beta1
              kind: ClusterRoleBinding
              metadata:
                name: system:kube-apiserver
                namespace: ""
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: system:kube-apiserver-to-kubelet
              subjects:
                - apiGroup: rbac.authorization.k8s.io
                  kind: User
                  name: kubernetes
            dest: "{{ WORK_DIR }}/kube-apiserver-cluster-role-binding.yaml"

        - name: Create ClusterRole to access the Kubelet API
          shell:
            cmd: kubectl apply --kubeconfig admin.kubeconfig -f kube-apiserver-to-kubelet-cluster-role.yaml
            chdir: "{{ WORK_DIR }}"

        - name: Bind the ClusterRole to the kubernetes user
          shell:
            cmd: kubectl apply --kubeconfig admin.kubeconfig -f kube-apiserver-cluster-role-binding.yaml
            chdir: "{{ WORK_DIR }}"

      run_once: true
