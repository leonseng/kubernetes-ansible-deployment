- set_fact:
    temp_dir: /tmp

# crictl
- name: Download crictl package
  uri:
    url: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.15.0/crictl-v1.15.0-linux-amd64.tar.gz
    dest: "{{ temp_dir }}/crictl-v1.15.0-linux-amd64.tar.gz"
    status_code: [200, 304]

- name: Clean up past runs
  file:
    name: "{{ temp_dir }}/crictl-v1.15.0-linux-amd64"
    state: absent
  become: yes

- name: Extract crictl package
  unarchive:
    src: "{{ temp_dir }}/crictl-v1.15.0-linux-amd64.tar.gz"
    dest: "{{ temp_dir }}/"
    remote_src: yes

- name: Copy crictl binary to executable path
  copy:
    src: "{{ temp_dir }}/crictl"
    dest: /usr/local/bin/
    mode: +x
    remote_src: yes
  become: yes

# runc
- name: Download runc package
  uri:
    url: https://github.com/opencontainers/runc/releases/download/v1.0.0-rc8/runc.amd64
    dest: "{{ temp_dir }}/runc.amd64"
    status_code: [200, 304]

- name: Copy runc binary to executable path
  copy:
    src: "{{ temp_dir }}/runc.amd64"
    dest: /usr/local/bin/runc
    mode: +x
    remote_src: yes
  become: yes

# containerd
- name: Create containerd directory
  file:
    name: "{{ temp_dir }}/containerd"
    state: directory

- name: Download containerd package
  uri:
    url: https://github.com/containerd/containerd/releases/download/v1.2.9/containerd-1.2.9.linux-amd64.tar.gz
    dest: "{{ temp_dir }}/containerd-1.2.9.linux-amd64.tar.gz"
    status_code: [200, 304]

- name: Extract containerd package
  unarchive:
    src: "{{ temp_dir }}/containerd-1.2.9.linux-amd64.tar.gz"
    dest: "{{ temp_dir }}/containerd"
    remote_src: yes

- name: Copy containerd binary to executable path
  shell:
    cmd: mv containerd/bin/* /bin/
    chdir: "{{ temp_dir }}"
  become: yes

- name: Create containerd config dir
  file:
    name: /etc/containerd/
    state: directory
  become: yes

- name: Create the containerd configuration file
  copy:
    content: |
      [plugins]
        [plugins.cri.containerd]
          snapshotter = "overlayfs"
          [plugins.cri.containerd.default_runtime]
            runtime_type = "io.containerd.runtime.v1.linux"
            runtime_engine = "/usr/local/bin/runc"
            runtime_root = ""
    dest: /etc/containerd/config.toml
  become: yes

- name: Create the containerd systemd unit
  copy:
    content: |
      [Unit]
      Description=containerd container runtime
      Documentation=https://containerd.io
      After=network.target

      [Service]
      ExecStartPre=/sbin/modprobe overlay
      ExecStart=/bin/containerd
      Restart=always
      {%- if http_proxy is defined %}
      Environment="HTTP_PROXY={{ http_proxy }}"
      {%- endif %}
      RestartSec=5
      Delegate=yes
      KillMode=process
      OOMScoreAdjust=-999
      LimitNOFILE=1048576
      LimitNPROC=infinity
      LimitCORE=infinity

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/containerd.service
  become: yes

- name: Start containerd service
  systemd:
    name: containerd
    state: restarted
    daemon_reload: yes
    enabled: yes
  become: yes